{
	"root": true,
	"env": {
		"browser": true,
		"node": true,
		"es6": true
	},
	"parser": "babel-eslint",
	"parserOptions": {
		"ecmaVersion": 6,
		"sourceType": "module",
		"ecmaFeatures": {
			"jsx": true
		}
	},
	"plugins": [
		"react",
		"babel"
	],
	"globals": {
		"React": true
	},
	"rules": {
		"comma-dangle": [
			2,
			"never"
		],
		// присваивание в условиях
		"no-cond-assign": [
			2,
			"except-parens"
		],
		// константы в условиях
		"no-constant-condition": 2,
		// повторение аргументов
		"no-dupe-args": 2,
		// повторение ключей
		"no-dupe-keys": 2,
		// повторение case в конструкции switch
		"no-duplicate-case": 2,
		// пустые block-statemant (if, try, while ...)
		"no-empty": 2,
		// перезапись ощибки в блоки catch (e = 20, e = null ...)
		"no-ex-assign": 2,
		// излишние операции над булевыми значениями (bar = !!!foo, if(!!foo) ...)
		"no-extra-boolean-cast": 2,
		// излишние скобки (a = (b * c) + d,  typeof (a))
		"no-extra-parens": [
			2,
			"all",
			{
				"conditionalAssign": false
			}
		],
		// излишние точки с запятой
		"no-extra-semi": 2,
		// перебивание Function Declaration переменной (вроде как, почитать еще раз)
		"no-func-assign": 2,
		// Не объявлять переменные и функции внутри блока
		"no-inner-declarations": [
			2,
			"both"
		],
		// лишние пробелы
		"no-irregular-whitespace": 2,
		// негативные левый опреанд в in
		"no-negated-in-lhs": 2,
		// вызов глобальных объектов как функций
		"no-obj-calls": 2,
		// пустой слот в массиве ([, 2]) (нулевая длина не считается)
		"no-sparse-arrays": 2,
		// проебал точку с запятой, перешел на новую строку
		"no-unexpected-multiline": 2,
		// типо если написал излишний код после return, break и т.д
		"no-unreachable": 2,
		// если, как дебил, сравниваешь NaN (NaN === NaN), юзай isNaN()
		"use-isnan": 2,
		// если ошибся в typeof (например typeof foo === "strnig")
		"valid-typeof": 2,
		// если ставишь setter без gettera и наоборот
		"accessor-pairs": 2,
		// если забыл return в методах массива
		"array-callback-return": 2,
		// объявлять var за пределами scope
		"block-scoped-var": 2,
		// если функция возвращает undefined
		"consistent-return": 2,
		// всегда стваить фигурные скобки (даже так if(true) {foo();})
		"curly": 2,
		// всегда юзать default в case (если не нужно, в конце написать // no default)
		/*
		 *switch (a) {
		 *     case 1:
		 *         break;
		 *
		 *     // no default
		 * }
		 */
		"default-case": 2,
		// после переноса строки точку ставить перед свойством
		"dot-location": [
			2,
			"property"
		],
		// доступ к свойству объекта через точку, а не кавычки
		"dot-notation": 2,
		// сравнение через ===
		"eqeqeq": [
			2,
			"smart"
		],
		// заставить проверять свойства через hasOwnProperty
		"guard-for-in": 2,
		// запрещает нативные alert, prompt, confirm
		"no-alert": 2,
		// зпрещает caller/callee
		"no-caller": 2,
		// выругает тебя, если юзаешь return в ненужном else
		"no-else-return": 2,
		// запрещает пустое тело функции
		"no-empty-function": [
			2,
			{
				"allow": []
			}
		],
		// запрещает пустые шаблоны (var {a: {} }} = foo;)
		"no-empty-pattern": 2,
		// запрещает сравнение null через == (только ===)
		"no-eq-null": 2,
		// запрещает eval
		"no-eval": 2,
		// запрещает модифицировать object.prototype
		"no-extend-native": 2,
		// запрещает излишний bind
		"no-extra-bind": 2,
		// запрещает излишний label
		"no-extra-label": 2,
		// заставляет ставить break
		"no-fallthrough": 2,
		// заставляет нормально писать float значения
		"no-floating-decimal": 2,
		// запрещает глобальные переменные, присваивать только через объекты (window, global)
		"no-implicit-globals": 2,
		"no-implicit-coercion": 2,
		// запрещает eval в setTimeout, setInterval ...
		"no-implied-eval": 2,
		// запрещает корявый this
		//		"no-invalid-this": 2,
		// запрещает label
		"no-labels": 2,
		"no-lone-blocks": 2,
		"no-loop-func": 2,
		//		"no-magic-numbers": [
		//			2,
		//			{
		//				"ignoreArrayIndexes": true
		//			}
		//		],
		// несколько пробелов, выравниевание по value (комплекс)
		"no-multi-spaces": [
			2,
			{
				"exceptions": {
					"BinaryExpression": true,
					"Property": true,
					"VariableDeclarator": true,
					"ImportDeclaration": true,
					"AssignmentExpression": true
				}
			}
		],
		// несколько строк
		"no-multi-str": 2,
		// запрещает переопределение
		"no-native-reassign": [
			2,
			{
				"exceptions": [
					"Object"
				]
			}
		],
		// запрещает new без присваивания
		"no-new": 2,
		// запрещает new в функциях
		"no-new-func": 2,
		// запрещает new в примитивах

		// ---------- посмотреть, обсудить ------------
		"no-new-wrappers": 2,
		// запрещает цифры с 0 (octals: 071 = 57)
		"no-octal": 2,
		// запрещает 251 в такой конструкции var foo = "Copyright \251";
		"no-octal-escape": 2,
		// запрещает переопределение свойств
		"no-param-reassign": [
			2,
			{
				"props": false
			}
		],
		// запрещает process.env
		"no-process-env": 2,
		// запрещает ___proto___
		"no-proto": 2,
		// запрещает двойное объявление переменной
		"no-redeclare": [
			2,
			{
				"builtinGlobals": true
			}
		],
		// запрещает возвращать выражения (исключая скобки)
		"no-return-assign": [
			2,
			"except-parens"
		],
		// запрещает url
		"no-script-url": 2,
		// запрещает asd = asd
		"no-self-assign": 2,
		// запрещает asd === asd
		"no-self-compare": 2,
		// запрещает , (оператор)
		"no-sequences": 2,
		// запрещает throw литералы (throw: 5)
		"no-throw-literal": 2,
		// запрещает менять переменные в услоивии цикла вне цикла
		"no-unmodified-loop-condition": 2,
		// запрещает неиспользуемы выражения, например просто "Hello" без присваивания
		"no-unused-expressions": 2,
		// запрещает неиспользуемы labels
		"no-unused-labels": 2,
		// запрещает бесполезные call, apply
		"no-useless-call": 2,
		// запрещает бесполезные concat'ы строк
		"no-useless-concat": 2,
		// запрещает использовать оператор void
		"no-void": 2,
		// запрещает with
		"no-with": 2,
		// запрещает пропускать radix (parseInt, кроме 10)
		"radix": [
			2,
			"as-needed"
		],
		// все переменные объявлять сверху
		"vars-on-top": 2,
		// как обрамлять функции вызова на месте
		"wrap-iife": [
			2,
			"inside"
		],
		// запрещает стиль йоды :D:D
		"yoda": [
			2,
			"never",
			{
				"exceptRange": false,
				"onlyEquality": false
			}
		],
		// заставляет юзать strict mode
		"strict": [
			2,
			"global"
		],
		// запрещает давать объекту error имя уже существующей переменной
		"no-catch-shadow": 2,
		//		"no-case-declarations": 2,
		// запрещает использовать оператор delete на переменных
		"no-delete-var": 2,
		// запрещает называть label как уже существующую переменную
		"no-label-var": 2,
		// двоякий смысл переменных в глобальной области и в локальной с одинаковым именем,
		"no-shadow": [
			2,
			{
				"builtinGlobals": false,
				"hoist": "functions",
				"allow": [
					"resolve",
					"reject",
					"done",
					"cb"
				]
			}
		],
		// запрещает использовать как переменные NaN, Infinity, undefined
		"no-shadow-restricted-names": 2,
		// запрещает переменные, не описанные в /*global ...*/
		"no-undef": [
			2,
			{
				"typeof": true
			}
		],
		// запрещает var a = undefined (она  итак undefined);
		"no-undef-init": 2,
		// запрещает переопределять undefined
		"no-undefined": 2,
		// запрещает неиспользуемые переменные, кроме аргументов
		// "no-unused-vars": [
		// 	2,
		// 	{
		// 		"vars": "local",
		// 		"args": "none"
		// 	}
		// ],
		// сначала объяви, потом используй
		"no-use-before-define": [
			2,
			{
				"functions": false,
				"classes": false
			}
		],
		// типо всегда return cb
		"callback-return": [
			2,
			[
				"callback",
				"cb",
				"next"
			]
		],
		// require только в top-level
		//		"global-require": 2,
		// всегда должен быть объект error в cb
		"handle-callback-err": [
			2,
			"^(err|error|anySpecificError)$"
		],
		// чето типо не путай require и простые переменные (не совсем вкурил)
		"no-mixed-requires": [
			2,
			{
				"grouping": false,
				"allowCall": false
			}
		],
		// не юзай new когда requir'ишь
		"no-new-require": 2,
		// запрещает складывать строки в путях
		"no-path-concat": 2,
		// запрещает process.exit
		"no-process-exit": 2,
		//TODO настроить
		// ограничивает import
		//"no-restricted-imports": 2,
		// ограничивает модули
		//"no-restricted-modules": 2,
		// запрещает Sync в node.js
		"no-sync": 2,
		// --------------------------------------------- СТИЛИ -----------------------------------------------


		"array-bracket-spacing": [
			2,
			"always"
		],
		// пробелы в после открытой и до закрытой объектной скобки
		"block-spacing": [
			2,
			"always"
		],
		// фигурные скобки в if, functions и т.д
		"brace-style": [
			2,
			"1tbs",
			{
				"allowSingleLine": true
			}
		],
		// юзай camelCase
		"camelcase": [
			2,
			{
				"properties": "always"
			}
		],
		// пробел и запятая (var foo, bar )
		"comma-spacing": [
			2,
			{
				"before": false,
				"after": true
			}
		],
		"computed-property-spacing": [
			2,
			"always"
		],
		// запятая в конце строки, а не в начале новой (var foo = 5, ...)
		"comma-style": [
			2,
			"last"
		],
		"eol-last": 2,
		"consistent-this": [
			"error",
			"that",
			"self",
			"_that",
			"_self",
			"_this"
		],
		// отступы
		"indent": [
			2,
			"tab",
			{
				"SwitchCase": 1
			}
		],
		// jsx кавычки
		"jsx-quotes": [
			2,
			"prefer-single"
		],
		// пробел и двоеточие
		"key-spacing": [
			2,
			{
				"beforeColon": false,
				"afterColon": true
			}
		],
		// пробел в спецсловах
		"keyword-spacing": [
			2,
			{
				"before": true,
				"after": true,
				"overrides": {
				}
			}
		],
		"linebreak-style": [
			2,
			"unix"
		],
		"new-cap": [
			2,
			{
				"capIsNewExceptions": [
					"Map",
					"List",
					"Set",
					"OrderedMap",
					"Router"
				]
			}
		],
		// комментарии
		"lines-around-comment": [
			2,
			{
				"beforeBlockComment": true,
				//"afterBlockComment": true,
				"beforeLineComment": true,
				//"afterLineComment": true,
				"allowBlockStart": true,
				"allowBlockEnd": true,
				"allowObjectStart": true,
				"allowObjectEnd": true,
				"allowArrayStart": true,
				"allowArrayEnd": true
			}
		],
		// чтобы при new всегда скобки были
		"new-parens": 2,
		// enter после объявления переменных
		"newline-after-var": [
			2,
			"always"
		],
		//"newline-before-return": 2,
		// каждый метод в цепочке с новой строки, до 3х можно в одну
		"newline-per-chained-call": [
			2,
			{
				"ignoreChainWithDepth": 3
			}
		],
		// не использовать конструктор массивов
		"no-array-constructor": 2,
		// запрещает побитовые операторы
		"no-bitwise": 2,
		// запрещает комментарии на той же строке, где и код
		"no-inline-comments": 2,
		// запрещает одиночный if
		"no-lonely-if": 2,
		// запрещает совместное использование табуляции и пробела
		"no-mixed-spaces-and-tabs": [
			2,
			"smart-tabs"
		],
		// запрещает пустые линии
		"no-multiple-empty-lines": [
			2,
			{
				"max": 10,
				"maxEOF": 1,
				"maxBOF": 1
			}
		],
		// запрещает отрицание в условиях
		"no-negated-condition": 2,
		// запрещает создание объекта через new
		"no-new-object": 2,
		// запрещает пробел при вызове функций
		"no-spaced-func": 2,
		// запрещает ненужный тернарный оператор (при объявлении можно)
		"no-unneeded-ternary": [
			2,
			{
				"defaultAssignment": true
			}
		],
		// запрещает пробел перед свойством
		"no-whitespace-before-property": 2,
		// пробелы в объектах
		"object-curly-spacing": [
			2,
			"always"
		],
		"one-var": [
			2,
			{
				"uninitialized": "always",
				"initialized": "never"
			}
		],
		// каждая переменная с новой строки
		"one-var-declaration-per-line": [
			2,
			"initializations"
		],
		// типо юзай короткие операторы
		"operator-assignment": [
			2,
			"always"
		],
		// перенос строки до или после оператора
		"operator-linebreak": [
			2,
			"after",
			{
				"overrides": {
					"?": "ignore",
					"+=": "none"
				}
			}
		],
		// проперти в кавычках
		"quote-props": [
			2,
			"as-needed",
			{
				"keywords": false,
				"unnecessary": true,
				"numbers": false
			}
		],
		"sort-imports": [
			2,
			{
				"ignoreCase": true,
				"ignoreMemberSort": false,
				"memberSyntaxSortOrder": [
					"none",
					"all",
					"multiple",
					"single"
				]
			}
		],
		// кавычки
		"quotes": [
			2,
			"backtick",
			"avoid-escape"
		],
		"semi": [
			2,
			"always"
		],
		// точка с запятой и пробел
		"semi-spacing": [
			2,
			{
				"before": false,
				"after": true
			}
		],
		// сортировка переменных
		"sort-vars": [
			2,
			{
				"ignoreCase": false
			}
		],
		"space-before-function-paren": [
			2,
			"never"
		],
		"space-in-parens": [
			2,
			"always"
		],
		"space-infix-ops": 2,
		// пробел перед блоком
		"space-before-blocks": [
			2,
			{
				"functions": "always",
				"keywords": "always",
				"classes": "always"
			}
		],
		// пробел в унарных операторах
		"space-unary-ops": [
			2,
			{
				"words": true,
				"nonwords": false
			}
		],
		"spaced-comment": [
			2,
			"always"
		],
		// типо ебашь регулярки в скобках
		"wrap-regex": 2,
		// стрелочные функции
		"arrow-body-style": [
			2,
			"always"
		],
		// скобки в стрелочных функциях
		"arrow-parens": [
			2,
			"always"
		],
		// пробел в стрелочный функции
		"arrow-spacing": [
			2,
			{
				"before": true,
				"after": true
			}
		],
		// проверяет супер
		"constructor-super": 2,
		// пробел и звездочка генератора
		//		"generator-star-spacing": [
		//			2,
		//			{
		//				"before": false,
		//				"after": true
		//			}
		//		],
		// не переопределять имя класса
		"no-class-assign": 2,
		// не юзать стрелочную функцию как лох :)
		"no-confusing-arrow": 2,
		// не переопределять const
		"no-const-assign": 2,
		// не повторяться в классах
		"no-dupe-class-members": 2,
		// запрещает new в символах
		"no-new-symbol": 2,
		// не использовать this до super
		"no-this-before-super": 2,
		"no-useless-computed-key": 2,
		// ненужный конструктор
		"no-useless-constructor": 2,
		"no-var": 2,
		// использовать короткую запись присваивания в объектах
		"object-shorthand": [
			2,
			"always",
			{
				"ignoreConstructors": true
			}
		],
		// использовать стрелочную функцию в колбэках
		"prefer-arrow-callback": 2,
		// скажет: ты че чмо, сделал let и не переопределяешь ее
		"prefer-const": 2,
		// юзай reflect
		"prefer-reflect": [
			2,
			{
				"exceptions": []
			}
		],
		// юзай rest параметры
		"prefer-rest-params": 2,
		// юзай spread в apply
		"prefer-spread": 2,
		// юзай норм строки с шаблонами
		"prefer-template": 2,
		// юзай yield в генераторах
		"require-yield": 2,
		// юзай пробелы в шаблонах
		"template-curly-spacing": [
			2,
			"always"
		],
		// пробел в yield и *
		"yield-star-spacing": [
			2,
			{
				"before": false,
				"after": true
			}
		],
		// --------------------------- REACT ------------------------------------


		// displayName
		"react/display-name": [
			2,
			{
				"ignoreTranspilerName": true
			}
		],
		// запрещает any, array, object в proptypes
		"react/forbid-prop-types": [
			2,
			{
				"forbid": []
			}
		],
		// запрещает dangerouslySetInnerHTML
		"react/no-danger": 2,
		// запрещает старые методы
		"react/no-deprecated": 2,
		// TODO запрещает setState в didMount
		"react/no-did-mount-set-state": 2,
		// TODO запрещает setState в didUpdate
		"react/no-did-update-set-state": 2,
		// запрещает менять state через свойства, а не через setState
		"react/no-direct-mutation-state": 2,
		// запрещает isMounted
		"react/no-is-mounted": 2,
		// один файл - один компонент (исключение компоненты без состояния)
		"react/no-multi-comp": [
			2,
			{
				"ignoreStateless": true
			}
		],
		// TODO запрещает локальный setState
		"react/no-set-state": 2,
		// запрещает string в refs
		"react/no-string-refs": 2,
		// запрещает незнакомые DOM свойства в jsx
		"react/no-unknown-property": 2,
		// юзай es6 классы
		"react/prefer-es6-class": [
			2,
			"always"
		],
		// лучше использовать stateless components по возможности
		"react/prefer-stateless-function": 2,
		// забыл PropTypes = пздц тебе
		"react/prop-types": [
			2,
			{
				"ignore": [],
				"customValidators": []
			}
		],
		// юзаешь jsx, подключай react
		"react/react-in-jsx-scope": 2,
		// не испольуй расширения в require
//		"react/require-extension": [
//			2,
//			{
//				"extensions": [
//					".js",
//					".jsx"
//				]
//			}
//		],
		// если нет children то делай самозакрывающийся компонент
		"react/self-closing-comp": [ 2, {
			"component": true,
			"html": false
		}],
		// сортировка
		"react/sort-comp": [
			2,
			{
				"order": [
					"constructor",
					"static-methods",
					"lifecycle",
					"/^on.+$/",
					"everything-else",
					"render"
				],
				"groups": {
					"constructor": [
						"constructor"
					],
					"lifecycle": [
						"propTypes",
						"contextTypes",
						"childContextTypes",
						"mixins",
						"statics",
						"defaultProps",
						"getDefaultProps",
						"getInitialState",
						"state",
						"getChildContext",
						"componentWillMount",
						"componentDidMount",
						"componentWillReceiveProps",
						"shouldComponentUpdate",
						"componentWillUpdate",
						"componentDidUpdate",
						"componentWillUnmount"
					],
					"render": [
						"/^render.+$/",
						"render"
					]
				}
			}
		],
		// сортировка PropTypes
		"react/sort-prop-types": [
			2,
			{
				"callbacksLast": true,
				"ignoreCase": true,
				"requiredFirst": true
			}
		],
		// оборачивать многострочные компоненты
		"react/jsx-wrap-multilines": [
			2,
			{
				"declaration": true,
				"assignment": false,
				"return": true
			}
		],
		// всегда к булеву атрибуту писать значение в jsx
		"react/jsx-boolean-value": [
			2,
			"always"
		],
		// где закрывать тег в jsx
		"react/jsx-closing-bracket-location": [
			2,
			{
				"nonEmpty": "tag-aligned",
				"selfClosing": "tag-aligned"
			}
		],
		// пробел в фигурных скобках
		"react/jsx-curly-spacing": [
			2,
			"always"
		],
		// префиксы
		"react/jsx-handler-names": [
			2,
			{
				"eventHandlerPrefix": "handle",
				"eventHandlerPropPrefix": "on"
			}
		],
		// отступы in props в jsx
		"react/jsx-indent-props": [
			2,
			"tab"
		],
		// отступы в jsx
		"react/jsx-indent": [
			2,
			"tab"
		],
		// должен быть key в перечисляемых объектах
		"react/jsx-key": 2,
		// максимальное количество props на одной строке
		"react/jsx-max-props-per-line": [
			2,
			{
				"maximum": 3
			}
		],
		// запрещает bind в jsx
		"react/jsx-no-bind": [
			2,
			{
				"ignoreRefs": true,
				"allowArrowFunctions": true,
				"allowBind": true
			}
		],
		// запрещает дублирование props
		"react/jsx-no-duplicate-props": [
			2,
			{
				"ignoreCase": true
			}
		],
		// запрещает литералы
		"react/jsx-no-literals": 2,
		// кинет ошибку если забыл подключить компонент
		"react/jsx-no-undef": 2,
		// запрещает Pascal нотацию
		"react/jsx-pascal-case": 2,
		// сортировка props
		"react/jsx-sort-props": [
			2,
			{
				"callbacksLast": true,
				"shorthandFirst": true,
				"ignoreCase": true
			}
		],
		// пробел перед закрывающим тегом
		"react/jsx-space-before-closing": [
			2,
			"always"
		],
		// jsx юзай переменные
		"react/jsx-uses-vars": 2,
		// babel rules

		"babel/generator-star-spacing": 2,
		//		"babel/new-cap": 2,
		//		"babel/array-bracket-spacing": 2,
		//		"babel/object-curly-spacing": 2,
		"babel/object-shorthand": 2,
		"babel/arrow-parens": 2,
		"babel/no-await-in-loop": 2,
		"babel/flow-object-type": 2
	}
}
